{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1hoA0cWqmlPhwOssBsg1g_PMnYu3uHwzO","timestamp":1634849083340}],"collapsed_sections":["vEFSgiumfaEl","g-3FnsP5faEl"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"9QodAjU6bCnL"},"source":["# `Python` Básico\n","\n"]},{"cell_type":"markdown","metadata":{"id":"wNFYdGeh2Xv6"},"source":["## Variables\n","\n","**Variable.** Consta de un espacio en el sistema de almacenaje (memoria principal de un ordenador) y un nombre simbólico (un identificador) que está asociado a dicho espacio.\n","\n","Dicho de otro modo, una variable es la relación que hay entre un nombre y un objeto ubicado en algún lugar de la memoria del ordenador.\n","\n","En `Python` asignamos valores a las variables siguiendo el siguiente formato: `nombre_variable = valor`"]},{"cell_type":"code","metadata":{"id":"qYGqmlyNbAvv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609150179324,"user_tz":-60,"elapsed":1081,"user":{"displayName":"Juan Gabriel Gomila Salas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdBM44CAiZlDiF-IkE0NJQH-LHKt1b0A22wmma_w=s64","userId":"03106941341701838274"}},"outputId":"b269a082-27fb-4648-dfce-616674f59367"},"source":["x = 1\n","x"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"eG1KUxvsbCYs","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1609150215736,"user_tz":-60,"elapsed":1033,"user":{"displayName":"Juan Gabriel Gomila Salas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdBM44CAiZlDiF-IkE0NJQH-LHKt1b0A22wmma_w=s64","userId":"03106941341701838274"}},"outputId":"87b1c5a6-284c-41c1-e3c6-d49dba74bbd9"},"source":["y = \"hola\"\n","y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'hola'"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"jgRynsvNbm2t"},"source":["###Python es un lenguaje de tipado dinámico, y no necesita que se declaren el tipo de una variable. El nombre de cada variables debe cumplir:\n","\n","### Restricciones sobre los nombres de las variables\n","\n","- No pueden empezar ni contener carácteres especiales\n","- No pueden empezar por números\n","- No pueden ser llamadas igual que las palabras claves reservadas en Python\n","- No pueden contener espacios\n","\n","**Observación.** Conviene que al darle nombre a una variable, éste tenga sentido en cuanto al dato que guarde, para que así resulte mucho más fácil la comprensión por parte de quien lea el código.\n","\n","**Observación.** A día de hoy, si los nombres de las variables están compuestos por múltiples palabras, hay 4 formas de escribir dichos nombres:\n","\n","- camelCase: `nombreMascota`\n","- PascalCase: `NombreMascota`\n","- snake_case: `nombre_mascota`\n","- kebab-case: `nombre-mascota`"]},{"cell_type":"markdown","source":["##  Tipos de variables\n","\n"," type() funcion para saber el tipo de dato de una variable."],"metadata":{"id":"VUB5iYWaprvH"}},{"cell_type":"code","source":["print(type(4))     #int (entero)\n","print(type(4.0))   #float (numero de punto flotante, numero con coma, decimal)\n","print(type(True))  #boolean (booleana, binaria, True o False, 0 o 1)\n","print(type(None))  #NoneType (variable vacia, no tiene nada)\n","print(type('c'))   #str (secuencia de caracteres)\n","print(type(\"hola\"))#str (secuencia de caracteres)\n","print(type([]))    #list (lista, conjunto ordenado de elementos)\n","print(type(print)) #builtin_function_or_method (funcion, serie de procesos, algoritmo)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L1_1mOCZpv1W","executionInfo":{"status":"ok","timestamp":1671994769206,"user_tz":360,"elapsed":175,"user":{"displayName":"Denis montoya","userId":"09488668026327185603"}},"outputId":"60782c50-af9b-4786-e74b-d98a04f156c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'int'>\n","<class 'float'>\n","<class 'bool'>\n","<class 'NoneType'>\n","<class 'str'>\n","<class 'str'>\n","<class 'list'>\n","<class 'builtin_function_or_method'>\n"]}]},{"cell_type":"markdown","source":["### Convierto numeros a strings y viceversa"],"metadata":{"id":"Bx9J3VdZqUsP"}},{"cell_type":"code","source":["entero = 2\n","string = str(entero) #convierte el numero a string (caracter)\n","print(type(entero))\n","print(type(string))\n","\n","print(entero+entero+entero) #puedo sumar numeros\n","print(string+string+string) #no puedo sumar strings, los concateno\n","\n","print('El resultado es '+str(entero)) #puedo imprimir una variable numerica en un mensaje"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4aKNCe1fqckg","executionInfo":{"status":"ok","timestamp":1671994925179,"user_tz":360,"elapsed":166,"user":{"displayName":"Denis montoya","userId":"09488668026327185603"}},"outputId":"9f989ad7-992a-4ad5-cc95-dd9e4f670461"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'int'>\n","<class 'str'>\n","6\n","222\n","El resultado es 2\n"]}]},{"cell_type":"code","source":["print(int(string)+int(string)) #convierte el string a entero"],"metadata":{"id":"czmBZIlZqmrG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0SrOJaa_cDyY"},"source":["### Palabras clave en `Python`\n","\n","Las palabras clave en `Python` son las que se muestran con el siguiente chunk de código."]},{"cell_type":"code","metadata":{"id":"ILCoaIO-bdh5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609151386190,"user_tz":-60,"elapsed":583,"user":{"displayName":"Juan Gabriel Gomila Salas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdBM44CAiZlDiF-IkE0NJQH-LHKt1b0A22wmma_w=s64","userId":"03106941341701838274"}},"outputId":"c96fd1d1-32dc-4910-ae1d-ecad945d3afd"},"source":["import keyword\n","keyword.kwlist"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['False',\n"," 'None',\n"," 'True',\n"," 'and',\n"," 'as',\n"," 'assert',\n"," 'break',\n"," 'class',\n"," 'continue',\n"," 'def',\n"," 'del',\n"," 'elif',\n"," 'else',\n"," 'except',\n"," 'finally',\n"," 'for',\n"," 'from',\n"," 'global',\n"," 'if',\n"," 'import',\n"," 'in',\n"," 'is',\n"," 'lambda',\n"," 'nonlocal',\n"," 'not',\n"," 'or',\n"," 'pass',\n"," 'raise',\n"," 'return',\n"," 'try',\n"," 'while',\n"," 'with',\n"," 'yield']"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"kSwXKsFbcWN9"},"source":["### Declarando múltiples variables en una sola línea\n","\n","Se hace del siguiente modo:"]},{"cell_type":"code","metadata":{"id":"tietJXkecQAu"},"source":["age, name = 22, \"Maria\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xAZuwZqDcm6k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1671994696007,"user_tz":360,"elapsed":17,"user":{"displayName":"Denis montoya","userId":"09488668026327185603"}},"outputId":"c3b17839-6a65-443b-c629-528e25d5dab9"},"source":["age"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"CcRUacwdcn5G","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1671994696009,"user_tz":360,"elapsed":16,"user":{"displayName":"Denis montoya","userId":"09488668026327185603"}},"outputId":"8e13f5c2-5c9c-4b8e-e11f-d27ded087d35"},"source":["name"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Maria'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"qLB8cZygc0H0"},"source":["### Operando con una variable numérica\n","\n","Una vez hemos guardado un valor numérico en una variable, podemos operar con él:"]},{"cell_type":"code","metadata":{"id":"4bjRNTqlcoYu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609153781126,"user_tz":-60,"elapsed":1061,"user":{"displayName":"Juan Gabriel Gomila Salas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdBM44CAiZlDiF-IkE0NJQH-LHKt1b0A22wmma_w=s64","userId":"03106941341701838274"}},"outputId":"f991b365-83b1-48ec-a7fe-8f65ce1ab1cb"},"source":["x = 3\n","x + 1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"J5tRgW1rc723"},"source":["Incluso podemos guardar ese valor en una nueva variable"]},{"cell_type":"code","metadata":{"id":"2yPmrsHac5OI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609153704870,"user_tz":-60,"elapsed":570,"user":{"displayName":"Juan Gabriel Gomila Salas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdBM44CAiZlDiF-IkE0NJQH-LHKt1b0A22wmma_w=s64","userId":"03106941341701838274"}},"outputId":"af70237e-e17d-45da-dd0d-e67866e23695"},"source":["y = x + 1\n","y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"SH8hduErdH-a"},"source":["O bien, podemos sobreescribir la variable que teníamos originalmente"]},{"cell_type":"code","metadata":{"id":"8gLMJ9h-dERY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609153789236,"user_tz":-60,"elapsed":1004,"user":{"displayName":"Juan Gabriel Gomila Salas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdBM44CAiZlDiF-IkE0NJQH-LHKt1b0A22wmma_w=s64","userId":"03106941341701838274"}},"outputId":"3cc47e4d-1560-4a7b-a488-1ac157ed2c7d"},"source":["x = x + 1\n","x"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"wT8UuOHTdUPx"},"source":["En `Python`, si queremos sobreescribir una variable numérica sumándole a esta una cantidad, lo podemos hacer del siguiente modo:"]},{"cell_type":"code","metadata":{"id":"DhwDnGSgdNEn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609153818032,"user_tz":-60,"elapsed":1025,"user":{"displayName":"Juan Gabriel Gomila Salas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdBM44CAiZlDiF-IkE0NJQH-LHKt1b0A22wmma_w=s64","userId":"03106941341701838274"}},"outputId":"a5577060-3d9e-48fe-dd90-470fa7c13a53"},"source":["x = 7\n","x"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"xs2HGOlgdfMn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609153861659,"user_tz":-60,"elapsed":1083,"user":{"displayName":"Juan Gabriel Gomila Salas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdBM44CAiZlDiF-IkE0NJQH-LHKt1b0A22wmma_w=s64","userId":"03106941341701838274"}},"outputId":"6657735a-0c55-45ac-bd9e-3a906fca9645"},"source":["x += 2\n","x"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"w8o5P0f3dl_Z"},"source":["**Observación.** Al igual que existe `+=`, también tenemos `-=`, `*=`, `/=`, `//=`, `%=` y `**=`, que son el equivalente a `+=` con el resto de operaciones aritméticas existentes en `Python` y que trataremos en el siguiente tema.\n"]},{"cell_type":"markdown","metadata":{"id":"PFS0fIq2d28a"},"source":["## Comentarios\n","\n","Dado un bloque de código, a veces puede ser útil explicar qué hace o en qué consiste, o bien hacer que una línea no se ejecute por algún motivo, pero que siga presente en dicho código. Aquí entran en juego los comentarios, que son parte del código, pero no se ejecutan.\n","\n","Si queremos hacer un comentario en una línea, utilizamos `#`"]},{"cell_type":"code","metadata":{"id":"lWQ8gsi3dkxs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609154407288,"user_tz":-60,"elapsed":582,"user":{"displayName":"Juan Gabriel Gomila Salas","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdBM44CAiZlDiF-IkE0NJQH-LHKt1b0A22wmma_w=s64","userId":"03106941341701838274"}},"outputId":"fc20c02f-55f7-40a6-cd54-76f0e95fa726"},"source":["# Vamos a definir la variable x y asignarle el valor 1\n","x = 1 # Aquí está nuestra variable x\n","# Esto es otro comentario\n","# Y ninguno de los comentarios se ejecutará\n","x"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"1aSTssRWeKYy"},"source":["**Observación.** Los comentarios, como ya se ha dicho, pueden ser muy útiles a la hora de entender nuestro código. Sin embargo, no conviene abusar de estos, como se ha hecho en el ejemplo anterior, pues el código pasa de ser claro a ser excesivamente largo y confuso."]},{"cell_type":"markdown","metadata":{"id":"OfVPNqAzfaEk"},"source":["###   En Python los tipos primitivos son: números, cadenas de caracteres (string), booleanos, tuplas, listas, y diccionarios.\n","\n","## _Métodos_.    \n","\n","Son funciones de clase, esto quiere decir que cada tipo de variable incluye unas funciones asociadas a ella desde su definición."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pO6VkRTifaEk","outputId":"4c210693-3db2-4748-e211-91f8e19f1543"},"outputs":[{"data":{"text/plain":["40"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["x.__add__(10)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YBh5XRi4faEl","outputId":"6a3bab9a-0ae7-49c5-acc1-ef6b568e318a"},"outputs":[{"data":{"text/plain":["{'uno': 30, 'dos': 40}"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["diccionario = {'uno': x, 'dos': x.__add__(10)} ;\n","\n","diccionario"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cRY_kP9ufaEl","outputId":"45b6b90b-b1c2-4c19-8be8-cde2e6c55fcc"},"outputs":[{"name":"stdout","output_type":"stream","text":["La Cartuja De Parma cuesta 30 pesos \n"," y el otro libro 40 pesos.\n"]}],"source":["print(f\"{nombre.title()} cuesta {diccionario['uno']} pesos \\n y el otro libro {diccionario['dos']} pesos.\")"]},{"cell_type":"markdown","metadata":{"id":"vEFSgiumfaEl"},"source":["### Se pueden revisar los métodos disponibles de una varibale utilizando la función dir()."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7qILINyvfaEl","outputId":"7358e09c-b381-40c9-ff6f-f5d20d1eaf8a"},"outputs":[{"data":{"text/plain":["['__abs__',\n"," '__add__',\n"," '__and__',\n"," '__bool__',\n"," '__ceil__',\n"," '__class__',\n"," '__delattr__',\n"," '__dir__',\n"," '__divmod__',\n"," '__doc__',\n"," '__eq__',\n"," '__float__',\n"," '__floor__',\n"," '__floordiv__',\n"," '__format__',\n"," '__ge__',\n"," '__getattribute__',\n"," '__getnewargs__',\n"," '__gt__',\n"," '__hash__',\n"," '__index__',\n"," '__init__',\n"," '__init_subclass__',\n"," '__int__',\n"," '__invert__',\n"," '__le__',\n"," '__lshift__',\n"," '__lt__',\n"," '__mod__',\n"," '__mul__',\n"," '__ne__',\n"," '__neg__',\n"," '__new__',\n"," '__or__',\n"," '__pos__',\n"," '__pow__',\n"," '__radd__',\n"," '__rand__',\n"," '__rdivmod__',\n"," '__reduce__',\n"," '__reduce_ex__',\n"," '__repr__',\n"," '__rfloordiv__',\n"," '__rlshift__',\n"," '__rmod__',\n"," '__rmul__',\n"," '__ror__',\n"," '__round__',\n"," '__rpow__',\n"," '__rrshift__',\n"," '__rshift__',\n"," '__rsub__',\n"," '__rtruediv__',\n"," '__rxor__',\n"," '__setattr__',\n"," '__sizeof__',\n"," '__str__',\n"," '__sub__',\n"," '__subclasshook__',\n"," '__truediv__',\n"," '__trunc__',\n"," '__xor__',\n"," 'bit_length',\n"," 'conjugate',\n"," 'denominator',\n"," 'from_bytes',\n"," 'imag',\n"," 'numerator',\n"," 'real',\n"," 'to_bytes']"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["dir(x)"]},{"cell_type":"markdown","metadata":{"id":"g-3FnsP5faEl"},"source":["### La función help() nos muestra la información completa de cada variable"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oCwLREODfaEl","outputId":"42922036-b15e-4893-96e2-28f201882e6c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Help on int object:\n","\n","class int(object)\n"," |  int([x]) -> integer\n"," |  int(x, base=10) -> integer\n"," |  \n"," |  Convert a number or string to an integer, or return 0 if no arguments\n"," |  are given.  If x is a number, return x.__int__().  For floating point\n"," |  numbers, this truncates towards zero.\n"," |  \n"," |  If x is not a number or if base is given, then x must be a string,\n"," |  bytes, or bytearray instance representing an integer literal in the\n"," |  given base.  The literal can be preceded by '+' or '-' and be surrounded\n"," |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n"," |  Base 0 means to interpret the base from the string as an integer literal.\n"," |  >>> int('0b100', base=0)\n"," |  4\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __abs__(self, /)\n"," |      abs(self)\n"," |  \n"," |  __add__(self, value, /)\n"," |      Return self+value.\n"," |  \n"," |  __and__(self, value, /)\n"," |      Return self&value.\n"," |  \n"," |  __bool__(self, /)\n"," |      self != 0\n"," |  \n"," |  __ceil__(...)\n"," |      Ceiling of an Integral returns itself.\n"," |  \n"," |  __divmod__(self, value, /)\n"," |      Return divmod(self, value).\n"," |  \n"," |  __eq__(self, value, /)\n"," |      Return self==value.\n"," |  \n"," |  __float__(self, /)\n"," |      float(self)\n"," |  \n"," |  __floor__(...)\n"," |      Flooring an Integral returns itself.\n"," |  \n"," |  __floordiv__(self, value, /)\n"," |      Return self//value.\n"," |  \n"," |  __format__(self, format_spec, /)\n"," |      Default object formatter.\n"," |  \n"," |  __ge__(self, value, /)\n"," |      Return self>=value.\n"," |  \n"," |  __getattribute__(self, name, /)\n"," |      Return getattr(self, name).\n"," |  \n"," |  __getnewargs__(self, /)\n"," |  \n"," |  __gt__(self, value, /)\n"," |      Return self>value.\n"," |  \n"," |  __hash__(self, /)\n"," |      Return hash(self).\n"," |  \n"," |  __index__(self, /)\n"," |      Return self converted to an integer, if self is suitable for use as an index into a list.\n"," |  \n"," |  __int__(self, /)\n"," |      int(self)\n"," |  \n"," |  __invert__(self, /)\n"," |      ~self\n"," |  \n"," |  __le__(self, value, /)\n"," |      Return self<=value.\n"," |  \n"," |  __lshift__(self, value, /)\n"," |      Return self<<value.\n"," |  \n"," |  __lt__(self, value, /)\n"," |      Return self<value.\n"," |  \n"," |  __mod__(self, value, /)\n"," |      Return self%value.\n"," |  \n"," |  __mul__(self, value, /)\n"," |      Return self*value.\n"," |  \n"," |  __ne__(self, value, /)\n"," |      Return self!=value.\n"," |  \n"," |  __neg__(self, /)\n"," |      -self\n"," |  \n"," |  __or__(self, value, /)\n"," |      Return self|value.\n"," |  \n"," |  __pos__(self, /)\n"," |      +self\n"," |  \n"," |  __pow__(self, value, mod=None, /)\n"," |      Return pow(self, value, mod).\n"," |  \n"," |  __radd__(self, value, /)\n"," |      Return value+self.\n"," |  \n"," |  __rand__(self, value, /)\n"," |      Return value&self.\n"," |  \n"," |  __rdivmod__(self, value, /)\n"," |      Return divmod(value, self).\n"," |  \n"," |  __repr__(self, /)\n"," |      Return repr(self).\n"," |  \n"," |  __rfloordiv__(self, value, /)\n"," |      Return value//self.\n"," |  \n"," |  __rlshift__(self, value, /)\n"," |      Return value<<self.\n"," |  \n"," |  __rmod__(self, value, /)\n"," |      Return value%self.\n"," |  \n"," |  __rmul__(self, value, /)\n"," |      Return value*self.\n"," |  \n"," |  __ror__(self, value, /)\n"," |      Return value|self.\n"," |  \n"," |  __round__(...)\n"," |      Rounding an Integral returns itself.\n"," |      Rounding with an ndigits argument also returns an integer.\n"," |  \n"," |  __rpow__(self, value, mod=None, /)\n"," |      Return pow(value, self, mod).\n"," |  \n"," |  __rrshift__(self, value, /)\n"," |      Return value>>self.\n"," |  \n"," |  __rshift__(self, value, /)\n"," |      Return self>>value.\n"," |  \n"," |  __rsub__(self, value, /)\n"," |      Return value-self.\n"," |  \n"," |  __rtruediv__(self, value, /)\n"," |      Return value/self.\n"," |  \n"," |  __rxor__(self, value, /)\n"," |      Return value^self.\n"," |  \n"," |  __sizeof__(self, /)\n"," |      Returns size in memory, in bytes.\n"," |  \n"," |  __str__(self, /)\n"," |      Return str(self).\n"," |  \n"," |  __sub__(self, value, /)\n"," |      Return self-value.\n"," |  \n"," |  __truediv__(self, value, /)\n"," |      Return self/value.\n"," |  \n"," |  __trunc__(...)\n"," |      Truncating an Integral returns itself.\n"," |  \n"," |  __xor__(self, value, /)\n"," |      Return self^value.\n"," |  \n"," |  bit_length(self, /)\n"," |      Number of bits necessary to represent self in binary.\n"," |      \n"," |      >>> bin(37)\n"," |      '0b100101'\n"," |      >>> (37).bit_length()\n"," |      6\n"," |  \n"," |  conjugate(...)\n"," |      Returns self, the complex conjugate of any int.\n"," |  \n"," |  to_bytes(self, /, length, byteorder, *, signed=False)\n"," |      Return an array of bytes representing an integer.\n"," |      \n"," |      length\n"," |        Length of bytes object to use.  An OverflowError is raised if the\n"," |        integer is not representable with the given number of bytes.\n"," |      byteorder\n"," |        The byte order used to represent the integer.  If byteorder is 'big',\n"," |        the most significant byte is at the beginning of the byte array.  If\n"," |        byteorder is 'little', the most significant byte is at the end of the\n"," |        byte array.  To request the native byte order of the host system, use\n"," |        `sys.byteorder' as the byte order value.\n"," |      signed\n"," |        Determines whether two's complement is used to represent the integer.\n"," |        If signed is False and a negative integer is given, an OverflowError\n"," |        is raised.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Class methods defined here:\n"," |  \n"," |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type\n"," |      Return the integer represented by the given array of bytes.\n"," |      \n"," |      bytes\n"," |        Holds the array of bytes to convert.  The argument must either\n"," |        support the buffer protocol or be an iterable object producing bytes.\n"," |        Bytes and bytearray are examples of built-in objects that support the\n"," |        buffer protocol.\n"," |      byteorder\n"," |        The byte order used to represent the integer.  If byteorder is 'big',\n"," |        the most significant byte is at the beginning of the byte array.  If\n"," |        byteorder is 'little', the most significant byte is at the end of the\n"," |        byte array.  To request the native byte order of the host system, use\n"," |        `sys.byteorder' as the byte order value.\n"," |      signed\n"," |        Indicates whether two's complement is used to represent the integer.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Static methods defined here:\n"," |  \n"," |  __new__(*args, **kwargs) from builtins.type\n"," |      Create and return a new object.  See help(type) for accurate signature.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors defined here:\n"," |  \n"," |  denominator\n"," |      the denominator of a rational number in lowest terms\n"," |  \n"," |  imag\n"," |      the imaginary part of a complex number\n"," |  \n"," |  numerator\n"," |      the numerator of a rational number in lowest terms\n"," |  \n"," |  real\n"," |      the real part of a complex number\n","\n"]}],"source":["help(x)"]},{"cell_type":"code","source":[],"metadata":{"id":"VweD_XRykaQB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"qIOhcWMmkgCx"},"execution_count":null,"outputs":[]}]}